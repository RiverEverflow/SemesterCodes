/*
题目描述
插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。

归并排序进行如下迭代操作：首先将原始序列看成N个只包含1个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下1个有序的序列。

现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？

输入格式：

输入在第一行给出正整数N (<=100)；随后一行给出原始序列的N个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。

输出格式：

首先在第1行中输出“Insertion Sort”表示插入排序、或“Merge Sort”表示归并排序；然后在第2行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行末不得有多余空格。
*/

#include <iostream> 
#include <vector>
using namespace std;
int sorted_len(vector<int> in){
	int ans=0;
	bool reverse=false;
	while(!reverse){
		ans+=2;
		int i=0;
		while(i<in.size()){
			int j=i+1;
			while(j<i+ans && j<in.size()){
				if(in[j-1]>in[j]){
					reverse=true;
					break;
				}
				j++;
			}
			if(reverse)break;
			i+=ans;
		}
		if(reverse)break;
	}
	return ans-2;
}
void next_merge(vector<int>& in,int curr_sorted){
	int len=curr_sorted*2;
	int i=0;
	while(i<in.size()){
		vector<int> t1,t2;
		for(int k=i;k<i+curr_sorted && k<in.size();k++)t1.push_back(in[k]);
		for(int k=i+curr_sorted;k<i+len && k<in.size();k++)t2.push_back(in[k]);
		int a=0,b=0;
		for(int j=i;j<i+t1.size()+t2.size();j++){
			if(a==t1.size()){
				in[j]=t2[b++];
				continue;
			}
			if(b==t2.size()){
				in[j]=t1[a++];
				continue;
			}
			if(t1[a]<t2[b])in[j]=t1[a++];
			else in[j]=t2[b++];
		}
		i+=len;
	}
}
void next_insert(vector<int>& in){
	int now=1;
	while(now<in.size()){
		if(in[now-1]>in[now])break;
		now++;
	}
	while(in[now-1]>in[now]){
		swap(in[now],in[now-1]);
		now--;
	}
}
bool isInsert(vector<int>& in,vector<int>& origin){
	int now=1;
	while(now<in.size()){
		if(in[now-1]>in[now])break;
		now++;
	}
	while(now<in.size()){
		if(in[now]!=origin[now])
			return false;
		now++;
	}
	return true;
}
int main(){
	int n,t;
	cin>>n;
	vector<int> ori(n);
	vector<int> tmp(n);
	for(int i=0;i<n;i++){
		cin>>t;
		ori[i]=t;
	}
	for(int i=0;i<n;i++){
		cin>>t;
		tmp[i]=t;
	}
	int judge=sorted_len(tmp);
	if(judge>1 && !isInsert(tmp,ori)){
		next_merge(tmp,judge);
		cout<<"Merge Sort"<<endl;
	}
	else{
		next_insert(tmp);
		cout<<"Insertion Sort"<<endl;
	}
	cout<<tmp[0];
	for(int i=1;i<n;i++){
		cout<<" "<<tmp[i];
	}
	return 0;
}
